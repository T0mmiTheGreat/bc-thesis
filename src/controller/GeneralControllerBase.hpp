/**
 * @file GeneralControllerBase.hpp
 * @author Tomáš Ludrovan
 * @brief GeneralControllerBase class
 * @version 0.1
 * @date 2023-12-03
 * 
 * @copyright Copyright (c) 2023
 * 
 */

#ifndef GENERALCONTROLLERBASE_HPP
#define GENERALCONTROLLERBASE_HPP

#include <memory>
#include <mutex>
#include <condition_variable>

#include "controller/ControllerBase.hpp"
#include "sysproxy/ISysProxy.hpp"
#include "sysproxy/SysProxyFactory.hpp"

/**
 * @brief Base class for non-root controllers.
 * 
 * @details This class provides definitions of event methods. Descendants may
 *          choose which events they actually care about and define them, and
 *          which ones they just ignore. Besides that, it also implements the
 *          "finishedEvent -> controller run loop" synchroznization.
 * 
 *          Is it violating the SRP? Depends on the point of view. I would say
 *          that the only responsibility of this class is to provide the base
 *          for the non-root controllers.
 */
class GeneralControllerBase : public ControllerBase {
private:
	/**
	 * @brief Sends the start event if the event loop is already running (obviously).
	 * 
	 * @details The start event is generated by the SysManager once the event
	 *          loop starts. After that, the new controllers won't be able to
	 *          receive the event. This method is called from the runController()
	 *          method so that every controller has the chance to receive the
	 *          event if it needs to.
	 */
	void sendStartEventIfEventLoopRunning();
protected:
	// These variables are used for synchronization; see the runController(),
	// finishedEvent()
	bool isControllerFinished;
	std::condition_variable cvIsControllerFinished;
	std::mutex mutexIsControllerFinished;

	/**
	 * @brief For system requests.
	 */
	std::shared_ptr<ISysProxy> sysProxy;
public:
	GeneralControllerBase():
		isControllerFinished{false},
		sysProxy{SysProxyFactory::createDefault()}
	{}

	virtual std::unique_ptr<IController> runController() override;
	virtual void startEvent() override {}
	virtual void quitEvent() override;
	virtual void keyDownEvent(KeyCode key) override {}
	virtual void mouseBtnDownEvent(MouseBtn btn) override {}
	virtual void mouseMoveEvent(int x, int y) override {}
	virtual void finishedEvent() override;
	virtual void abortEvent() override;
	virtual void frameEvent() override {}
	virtual void paintEvent(std::shared_ptr<ICanvas> canvas, Rect& invalidRect) {}
};

#endif // GENERALCONTROLLERBASE_HPP
